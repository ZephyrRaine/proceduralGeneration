/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

synchronized public void win_draw1(PApplet appc, GWinData data) { //_CODE_:editeur:408450:
  appc.background(230);
} //_CODE_:editeur:408450:

public void generateButton_click(GButton source, GEvent event) { //_CODE_:generateButton:895992:
    InitRooms();
} //_CODE_:generateButton:895992:

public void mapSizeSlider_change(GSlider source, GEvent event) { //_CODE_:mapSizeSlider:557115:
  tempMapWidth = tempMapHeight = source.getValueI();
} //_CODE_:mapSizeSlider:557115:

public void tileSizeSlider_change(GSlider source, GEvent event) { //_CODE_:tileSizeSlider:240533:
  println("slider2 - GSlider >> GEvent." + event + " @ " + millis());
  tempTWidth = tempTHeight = source.getValueI();
} //_CODE_:tileSizeSlider:240533:

public void iterationsMaxSlider_change(GSlider source, GEvent event) { //_CODE_:iterationsMaxSlider:487152:
  mapParams.nbIterationsMax = source.getValueI();
} //_CODE_:iterationsMaxSlider:487152:

public void minCorridors_change(GSlider source, GEvent event) { //_CODE_:slider1:397826:
  mapParams.nbSubIterationsMin = source.getValueI();
} //_CODE_:slider1:397826:

public void maxCorridors_change(GSlider source, GEvent event) { //_CODE_:slider2:285483:
  mapParams.nbSubIterationsMax = source.getValueI();
} //_CODE_:slider2:285483:

public void slider3_change1(GSlider source, GEvent event) { //_CODE_:slider3:902514:
 mapParams.nbMinRooms = source.getValueI();
} //_CODE_:slider3:902514:

public void slider4_change1(GSlider source, GEvent event) { //_CODE_:slider4:990699:
  mapParams.nbMaxRooms = source.getValueI();
} //_CODE_:slider4:990699:

public void showGrid_clicked(GCheckbox source, GEvent event) { //_CODE_:checkbox1:596855:
  showGrid = !showGrid;
} //_CODE_:checkbox1:596855:

public void checkbox2_clicked1(GCheckbox source, GEvent event) { //_CODE_:checkbox2:230654:
  showInfos = !showInfos;
} //_CODE_:checkbox2:230654:

public void IterationsMinSlider_change(GSlider source, GEvent event) { //_CODE_:iterationsMinSlider:728931:
    mapParams.nbIterationsMin = source.getValueI();;
} //_CODE_:iterationsMinSlider:728931:

public void button1_click1(GButton source, GEvent event) { //_CODE_:button1:325504:
  println("button1 - GButton >> GEvent." + event + " @ " + millis());
} //_CODE_:button1:325504:

public void button2_click1(GButton source, GEvent event) { //_CODE_:button2:728914:
  ExpandRooms();
} //_CODE_:button2:728914:

public void slider5_change1(GSlider source, GEvent event) { //_CODE_:slider5:924706:
  println("slider5 - GSlider >> GEvent." + event + " @ " + millis());
} //_CODE_:slider5:924706:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setCursor(ARROW);
  surface.setTitle("Sketch Window");
  editeur = GWindow.getWindow(this, "Editeur", 0, 0, 480, 640, JAVA2D);
  editeur.noLoop();
  editeur.addDrawHandler(this, "win_draw1");
  generateButton = new GButton(editeur, 10, 560, 110, 60);
  generateButton.setText("Generate (C)");
  generateButton.setTextBold();
  generateButton.addEventHandler(this, "generateButton_click");
  widthLabel = new GLabel(editeur, 0, 20, 60, 20);
  widthLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  widthLabel.setText("WinSize");
  widthLabel.setOpaque(false);
  mapSizeSlider = new GSlider(editeur, 60, 0, 180, 60, 10.0);
  mapSizeSlider.setShowValue(true);
  mapSizeSlider.setShowLimits(true);
  mapSizeSlider.setLimits(960, 640, 1920);
  mapSizeSlider.setNbrTicks(5);
  mapSizeSlider.setStickToTicks(true);
  mapSizeSlider.setShowTicks(true);
  mapSizeSlider.setNumberFormat(G4P.INTEGER, 0);
  mapSizeSlider.setOpaque(false);
  mapSizeSlider.addEventHandler(this, "mapSizeSlider_change");
  label2 = new GLabel(editeur, 0, 80, 60, 20);
  label2.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label2.setText("TileSize");
  label2.setOpaque(false);
  tileSizeSlider = new GSlider(editeur, 60, 60, 180, 60, 10.0);
  tileSizeSlider.setShowValue(true);
  tileSizeSlider.setShowLimits(true);
  tileSizeSlider.setLimits(16, 4, 32);
  tileSizeSlider.setNbrTicks(8);
  tileSizeSlider.setStickToTicks(true);
  tileSizeSlider.setShowTicks(true);
  tileSizeSlider.setNumberFormat(G4P.INTEGER, 0);
  tileSizeSlider.setOpaque(false);
  tileSizeSlider.addEventHandler(this, "tileSizeSlider_change");
  iterationsMaxSlider = new GSlider(editeur, 60, 190, 180, 60, 10.0);
  iterationsMaxSlider.setShowValue(true);
  iterationsMaxSlider.setShowLimits(true);
  iterationsMaxSlider.setLimits(3, 1, 15);
  iterationsMaxSlider.setNbrTicks(15);
  iterationsMaxSlider.setStickToTicks(true);
  iterationsMaxSlider.setShowTicks(true);
  iterationsMaxSlider.setNumberFormat(G4P.INTEGER, 0);
  iterationsMaxSlider.setOpaque(false);
  iterationsMaxSlider.addEventHandler(this, "iterationsMaxSlider_change");
  NombreIterationsMax = new GLabel(editeur, 0, 190, 60, 60);
  NombreIterationsMax.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  NombreIterationsMax.setText("Branches   Iterations    Max");
  NombreIterationsMax.setOpaque(false);
  label1 = new GLabel(editeur, 0, 250, 60, 60);
  label1.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label1.setText("Corridors    Iterations   Min");
  label1.setOpaque(false);
  slider1 = new GSlider(editeur, 60, 250, 180, 60, 10.0);
  slider1.setShowValue(true);
  slider1.setShowLimits(true);
  slider1.setLimits(2, 1, 15);
  slider1.setNbrTicks(15);
  slider1.setStickToTicks(true);
  slider1.setShowTicks(true);
  slider1.setNumberFormat(G4P.INTEGER, 0);
  slider1.setOpaque(false);
  slider1.addEventHandler(this, "minCorridors_change");
  label3 = new GLabel(editeur, 0, 310, 60, 60);
  label3.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label3.setText("Corridors     Iterations    Max");
  label3.setOpaque(false);
  slider2 = new GSlider(editeur, 60, 310, 180, 60, 10.0);
  slider2.setShowValue(true);
  slider2.setShowLimits(true);
  slider2.setLimits(5, 1, 15);
  slider2.setNbrTicks(15);
  slider2.setStickToTicks(true);
  slider2.setShowTicks(true);
  slider2.setNumberFormat(G4P.INTEGER, 0);
  slider2.setOpaque(false);
  slider2.addEventHandler(this, "maxCorridors_change");
  label4 = new GLabel(editeur, 0, 370, 60, 60);
  label4.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label4.setText("Segments   Min   Rooms");
  label4.setOpaque(false);
  label5 = new GLabel(editeur, 0, 430, 60, 60);
  label5.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label5.setText("Segments   Max    Rooms");
  label5.setOpaque(false);
  slider3 = new GSlider(editeur, 60, 370, 180, 60, 10.0);
  slider3.setShowValue(true);
  slider3.setShowLimits(true);
  slider3.setLimits(2, 1, 10);
  slider3.setNbrTicks(10);
  slider3.setStickToTicks(true);
  slider3.setShowTicks(true);
  slider3.setNumberFormat(G4P.INTEGER, 0);
  slider3.setOpaque(false);
  slider3.addEventHandler(this, "slider3_change1");
  slider4 = new GSlider(editeur, 60, 430, 180, 60, 10.0);
  slider4.setShowValue(true);
  slider4.setShowLimits(true);
  slider4.setLimits(5, 1, 10);
  slider4.setNbrTicks(10);
  slider4.setStickToTicks(true);
  slider4.setShowTicks(true);
  slider4.setNumberFormat(G4P.INTEGER, 0);
  slider4.setOpaque(false);
  slider4.addEventHandler(this, "slider4_change1");
  checkbox1 = new GCheckbox(editeur, 10, 500, 120, 20);
  checkbox1.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  checkbox1.setText("Show Grid (G)");
  checkbox1.setOpaque(false);
  checkbox1.addEventHandler(this, "showGrid_clicked");
  checkbox1.setSelected(true);
  checkbox2 = new GCheckbox(editeur, 10, 530, 120, 20);
  checkbox2.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  checkbox2.setText("Show Infos (I)");
  checkbox2.setOpaque(false);
  checkbox2.addEventHandler(this, "checkbox2_clicked1");
  checkbox2.setSelected(true);
  iterationsMinSlider = new GSlider(editeur, 60, 130, 180, 60, 10.0);
  iterationsMinSlider.setShowValue(true);
  iterationsMinSlider.setShowLimits(true);
  iterationsMinSlider.setLimits(3, 1, 15);
  iterationsMinSlider.setNbrTicks(15);
  iterationsMinSlider.setStickToTicks(true);
  iterationsMinSlider.setShowTicks(true);
  iterationsMinSlider.setNumberFormat(G4P.INTEGER, 0);
  iterationsMinSlider.setOpaque(false);
  iterationsMinSlider.addEventHandler(this, "IterationsMinSlider_change");
  BrancheIterationMin = new GLabel(editeur, 0, 130, 60, 60);
  BrancheIterationMin.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  BrancheIterationMin.setText("Branches    Iterations   Min");
  BrancheIterationMin.setOpaque(false);
  button1 = new GButton(editeur, 260, 560, 200, 60);
  button1.setText("Populate (P)");
  button1.setLocalColorScheme(GCScheme.RED_SCHEME);
  button1.addEventHandler(this, "button1_click1");
  button2 = new GButton(editeur, 130, 560, 110, 60);
  button2.setText("Expand (E)");
  button2.addEventHandler(this, "button2_click1");
  slider5 = new GSlider(editeur, 140, 500, 100, 50, 10.0);
  slider5.setShowValue(true);
  slider5.setShowLimits(true);
  slider5.setLimits(0.0, 0.0, 1.0);
  slider5.setNbrTicks(9);
  slider5.setStickToTicks(true);
  slider5.setShowTicks(true);
  slider5.setNumberFormat(G4P.DECIMAL, 2);
  slider5.setOpaque(false);
  slider5.addEventHandler(this, "slider5_change1");
  editeur.loop();
}

// Variable declarations 
// autogenerated do not edit
GWindow editeur;
GButton generateButton; 
GLabel widthLabel; 
GSlider mapSizeSlider; 
GLabel label2; 
GSlider tileSizeSlider; 
GSlider iterationsMaxSlider; 
GLabel NombreIterationsMax; 
GLabel label1; 
GSlider slider1; 
GLabel label3; 
GSlider slider2; 
GLabel label4; 
GLabel label5; 
GSlider slider3; 
GSlider slider4; 
GCheckbox checkbox1; 
GCheckbox checkbox2; 
GSlider iterationsMinSlider; 
GLabel BrancheIterationMin; 
GButton button1; 
GButton button2; 
GSlider slider5; 